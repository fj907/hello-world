import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import seaborn as sns
# 解决中文显示问题
plt.rcParams['font.sans-serif']=['SimHei']
plt.rcParams['axes.unicode_minus'] = False

"""
'鲌氏鲹': 0, '鲹': 1, '大鳍鱊': 2, '刀鲚': 3,  '达氏鲌': 4, '桂鱼': 5, '红鳍原鲌': 6, '花魤': 7, 
'黄尾鲴': 8, '鲫鱼': 9, '鲤鱼': 10, '蒙古鲌': 11, '似鳊': 12, '三角鲂': 13, '细磷鲴': 14
"""

yu_data = pd.read_csv(r'D:/classification.csv')
yu_data = yu_data.dropna() #去掉缺失值
#提取特征和类别
X = yu_data.iloc[:, 1:18]#[1,2,8,9,10,14,18]]
y = yu_data.iloc[:, 19]
#划分训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=33)
#transfer = StandardScaler()
#X_train = transfer.fit_transform(X_train)
#X_test = transfer.transform(X_test)
estimator = RandomForestClassifier(n_estimators=200, max_depth=10)
#加入网格搜索与交叉验证
#参数准备
#param_dict = {"n_estimators": [100,2000], "max_depth": [5,20]}
#estimator = GridS232archCV(estimator, param_grid = param_dict, cv = 3)
estimator.fit(X_train, y_train)
# 5)模型评估
#预测值
y_predict = estimator.predict(X_test)
print("y_predict:\n", y_predict)
#计算准确率
score = estimator.score(X_test, y_test)
print("准确率为: \n", score)
#各个特征重要性
importances = estimator.feature_importances_
print("重要性：", importances)

#重要性累加
im_all = []
a = 0
for i in range(0,17):
    im_i = a + importances[i]
    a = im_i
    im_all.append(im_i)
print(im_all)


#将特征重要度以柱状图展示
plt.figure()
plt.title("Feature importances")
plt.bar(range(len(importances)), importances[np.argsort(importances)[::-1]], color="r", align="center")
plt.xticks(range(len(importances)), [list(X_test.columns)[i] for i in np.argsort(importances)[::-1]], rotation='-90')
plt.xlim([-1, len(importances)])
plt.ylim(0.0,1.0)
sns.despine()
x = range(0,17)
plt.plot(x, im_all, "k", marker='.', ms=6)  #折线
plt.hlines(0.85, 0, 17, colors='r', linestyles='--') #画横虚线
plt.legend(loc="upper left")
plt.show()
#报告
report = classification_report(y_test, y_predict,labels=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14])
print("报告：", report)
#最佳参数: best_ params_
#print("最佳参数: \n", estimator.best_params_)
#最佳结果: best_ score_
#print("最佳结果: \n", estimator.best_score_)
print("混淆矩阵：", confusion_matrix(y_test, y_predict))
